dependencies {
    // compile（api）：这种是我们最常用的方式，使用该方式依赖的库将会参与编译和打包。也就是最简单的 depency
    api project(":biz-shared")
    api project(":common-service-facade")

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
//    implementation 'org.springframework.boot:spring-boot-starter-data-neo4j'

    // implementation：使用了该命令编译的依赖，它仅仅对当前的Module提供接口
//    implementation 'org.springframework.boot:spring-boot-starter-actuator'
//    implementation 'org.springframework.boot:spring-boot-starter-web'

    // testCompile（testImplementation）testCompile 只在单元测试代码的编译以及最终打包测试apk时有效。
//    testImplementation('org.springframework.boot:spring-boot-starter-test') {
//        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
//    }
}

// 主模块
bootJar {
    enabled = true
}

//指定 Jar 启动 Main
//mainClassName = "com.magicliang.graph.biz.service.impl.GraphDatabaseApplication"